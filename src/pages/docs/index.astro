---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import InnerHero from '../../components/sections/InnerHero.astro';
import heroImage from '../../assets/images/wethepeople.jpg';

const docsEntries = await getCollection('docs');

// Filter entries by type
const mainEntries = docsEntries.filter(entry => entry.data.type === 'main').sort((a, b) => a.data.title.localeCompare(b.data.title));
const policyEntries = docsEntries.filter(entry => entry.data.type === 'policy').sort((a, b) => a.data.title.localeCompare(b.data.title));
const reportEntries = docsEntries.filter(entry => entry.data.type === 'report').sort((a, b) => a.data.title.localeCompare(b.data.title));
const taxEntries = docsEntries.filter(entry => entry.data.type === 'tax').sort((a, b) => a.data.title.localeCompare(b.data.title));

// Hero content
const heroContent = {
    title: 'Organizational Documents',
    description: 'Official documents, policies, and reports governing our organization',
    overlayOpacity: 0.8,
    backgroundImage: heroImage,
};
---

<Layout title="Organizational Documents">
    <InnerHero content={heroContent} />

    <section class="py-small">
        <div class="site-container px-8">
            <!-- Main Documents Section at Top -->
            {mainEntries.length > 0 && (
                <div class="mb-12 pb-8 border-b border-body-base/10">
                    <h2 class="text-xl font-bold mb-6">Foundational Documents</h2>
                    <div class="space-y-6">
                        {mainEntries.map((entry) => {
                            const formattedDate = new Intl.DateTimeFormat('en-US', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                            }).format(entry.data.lastUpdated);

                            return (
                                <div class="border-b border-body-base/10 pb-6 last:border-b-0">
                                    <a href={`/docs/${entry.id}`} class="group block">
                                        <h3 class="text-lg font-semibold group-hover:text-accent transition-colors mb-1">
                                            {entry.data.title}
                                        </h3>
                                        <p class="text-xs text-body-base/70 mb-3">Last updated: {formattedDate}</p>
                                        {entry.data.seo?.description && (
                                            <p class="text-sm text-body-base/60 leading-relaxed">
                                                {entry.data.seo.description}
                                            </p>
                                        )}
                                    </a>
                                </div>
                            );
                        })}
                    </div>
                </div>
            )}

            <!-- Two Column Layout -->
            <div class="grid md:grid-cols-2 gap-12">
                <!-- Left Column: Policies -->
                <div>
                    <h2 class="text-xl font-bold mb-6">Policies</h2>
                    <div class="space-y-6">
                        {policyEntries.map((entry) => {
                            const formattedDate = new Intl.DateTimeFormat('en-US', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                            }).format(entry.data.lastUpdated);

                            return (
                                <div class="border-b border-body-base/10 pb-6">
                                    <a href={`/docs/${entry.id}`} class="group block">
                                        <h3 class="text-lg font-semibold group-hover:text-accent transition-colors mb-1">
                                            {entry.data.title}
                                        </h3>
                                        <p class="text-xs text-body-base/70 mb-3">Last updated: {formattedDate}</p>
                                        {entry.data.seo?.description && (
                                            <p class="text-sm text-body-base/60 leading-relaxed">
                                                {entry.data.seo.description}
                                            </p>
                                        )}
                                    </a>
                                </div>
                            );
                        })}
                    </div>
                </div>

                <!-- Right Column: Reports -->
                <div>
                    <h2 class="text-xl font-bold mb-6">Reports</h2>
                    <div class="space-y-6">
                        {reportEntries.map((entry) => {
                            const formattedDate = new Intl.DateTimeFormat('en-US', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                            }).format(entry.data.lastUpdated);

                            return (
                                <div class="border-b border-body-base/10 pb-6">
                                    <a href={`/docs/${entry.id}`} class="group block">
                                        <h3 class="text-lg font-semibold group-hover:text-accent transition-colors mb-1">
                                            {entry.data.title}
                                        </h3>
                                        <p class="text-xs text-body-base/70 mb-3">Last updated: {formattedDate}</p>
                                        {entry.data.seo?.description && (
                                            <p class="text-sm text-body-base/60 leading-relaxed">
                                                {entry.data.seo.description}
                                            </p>
                                        )}
                                    </a>
                                </div>
                            );
                        })}
                    </div>
                </div>
            </div>

            <!-- Tax Documents Section -->
            {taxEntries.length > 0 && (
                <div class="mt-12 pt-8 border-t border-body-base/10">
                    <h2 class="text-xl font-bold mb-6">Tax Documents</h2>
                    <div class="space-y-6">
                        {taxEntries.map((entry) => {
                            const formattedDate = new Intl.DateTimeFormat('en-US', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                            }).format(entry.data.lastUpdated);

                            return (
                                <div class="border-b border-body-base/10 pb-6 last:border-b-0">
                                    <a href={`/docs/${entry.id}`} class="group block">
                                        <h3 class="text-lg font-semibold group-hover:text-accent transition-colors mb-1">
                                            {entry.data.title}
                                        </h3>
                                        <p class="text-xs text-body-base/70 mb-3">Last updated: {formattedDate}</p>
                                        {entry.data.seo?.description && (
                                            <p class="text-sm text-body-base/60 leading-relaxed">
                                                {entry.data.seo.description}
                                            </p>
                                        )}
                                    </a>
                                </div>
                            );
                        })}
                    </div>
                </div>
            )}
        </div>
    </section>
</Layout> 