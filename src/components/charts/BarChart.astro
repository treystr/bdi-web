---
export interface Props {
    id: string;
    title: string;
    data: Array<{label: string; count: number}>;
    className?: string;
}

const { id, title, data, className = '' } = Astro.props;

// Sort data by count in descending order (highest on top)
const sortedData = [...data].sort((a, b) => b.count - a.count);
const labels = sortedData.map(item => item.label);
const counts = sortedData.map(item => item.count);
---

<div class={`chart-container ${className}`}>
    <h3 class="chart-title">{title}</h3>
    <div class="chart-wrapper">
        <canvas id={id} class="chart-canvas"></canvas>
    </div>
</div>

<script define:vars={{ id, labels, counts, title }}>
    // Initialize chart when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        // Load Chart.js from CDN if not already loaded
        if (typeof Chart === 'undefined') {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js';
            script.onload = function() {
                initChart();
            };
            script.onerror = function() {
                console.error('Failed to load Chart.js from CDN');
                showError();
            };
            document.head.appendChild(script);
        } else {
            initChart();
        }
        
        function initChart() {
            const ctx = document.getElementById(id);
            if (!ctx) return;
            
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Responses',
                        data: counts,
                        backgroundColor: 'rgba(249, 115, 22, 0.8)', // Orange theme color
                        borderColor: 'rgba(249, 115, 22, 1)',
                        borderWidth: 1,
                        borderRadius: 4,
                        borderSkipped: false,
                    }]
                },
                options: {
                    indexAxis: 'y', // Horizontal bars
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false // Hide legend for bar charts
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: 'white',
                            bodyColor: 'white',
                            borderColor: 'rgba(249, 115, 22, 1)',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    return `${context.parsed.x} responses`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            },
                            ticks: {
                                color: 'rgba(0, 0, 0, 0.7)',
                                font: {
                                    size: 12
                                }
                            }
                        },
                        y: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                color: 'rgba(0, 0, 0, 0.7)',
                                font: {
                                    size: 12
                                },
                                maxRotation: 0,
                                callback: function(value, index) {
                                    const label = this.getLabelForValue(value);
                                    // Truncate long labels for better display
                                    return label.length > 25 ? label.substring(0, 25) + '...' : label;
                                }
                            }
                        }
                    },
                    layout: {
                        padding: {
                            top: 10,
                            bottom: 10,
                            left: 10,
                            right: 10
                        }
                    }
                }
            });
        }
        
        function showError() {
            const container = document.getElementById(id)?.parentElement;
            if (container) {
                container.innerHTML = `
                    <div class="chart-error">
                        <p>Unable to load chart. Please refresh the page.</p>
                    </div>
                `;
            }
        }
    });
</script>

<style>
    .chart-container {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        border: 1px solid rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
    }
    
    .chart-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: rgba(0, 0, 0, 0.9);
        margin-bottom: 1rem;
        text-align: center;
    }
    
    .chart-wrapper {
        position: relative;
        height: 300px;
        width: 100%;
    }
    
    .chart-canvas {
        max-width: 100%;
        height: 100%;
    }
    
    .chart-error {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 300px;
        color: rgba(0, 0, 0, 0.6);
        font-style: italic;
    }
    
    @media (max-width: 768px) {
        .chart-container {
            padding: 1rem;
        }
        
        .chart-title {
            font-size: 1.1rem;
        }
        
        .chart-wrapper {
            height: 250px;
        }
    }
</style>
