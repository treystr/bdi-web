---
export interface Props {
    id: string;
    title: string;
    data: Array<{label: string; count: number}>;
    className?: string;
}

const { id, title, data, className = '' } = Astro.props;

const labels = data.map(item => item.label);
const counts = data.map(item => item.count);
---

<div class={`chart-container ${className}`}>
    <h3 class="chart-title">{title}</h3>
    <div class="chart-wrapper">
        <canvas id={id} class="chart-canvas"></canvas>
    </div>
</div>

<script define:vars={{ id, labels, counts, title }}>
    // Initialize chart when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        // Load Chart.js from CDN if not already loaded
        if (typeof Chart === 'undefined') {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js';
            script.onload = function() {
                initChart();
            };
            script.onerror = function() {
                console.error('Failed to load Chart.js from CDN');
                showError();
            };
            document.head.appendChild(script);
        } else {
            initChart();
        }
        
        function initChart() {
            const ctx = document.getElementById(id);
            if (!ctx) return;
            
            // Generate colors for pie chart segments
            const colors = [
                'rgba(249, 115, 22, 0.8)',   // Orange
                'rgba(59, 130, 246, 0.8)',   // Blue
                'rgba(16, 185, 129, 0.8)',   // Green
                'rgba(245, 101, 101, 0.8)',  // Red
                'rgba(139, 92, 246, 0.8)',   // Purple
                'rgba(245, 158, 11, 0.8)',   // Amber
                'rgba(236, 72, 153, 0.8)',   // Pink
                'rgba(20, 184, 166, 0.8)',   // Teal
            ];
            
            const borderColors = [
                'rgba(249, 115, 22, 1)',
                'rgba(59, 130, 246, 1)',
                'rgba(16, 185, 129, 1)',
                'rgba(245, 101, 101, 1)',
                'rgba(139, 92, 246, 1)',
                'rgba(245, 158, 11, 1)',
                'rgba(236, 72, 153, 1)',
                'rgba(20, 184, 166, 1)',
            ];
            
            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: counts,
                        backgroundColor: colors.slice(0, labels.length),
                        borderColor: borderColors.slice(0, labels.length),
                        borderWidth: 2,
                        hoverBorderWidth: 3,
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'bottom',
                            labels: {
                                color: 'rgba(0, 0, 0, 0.7)',
                                font: {
                                    size: 13
                                },
                                padding: 20,
                                usePointStyle: true,
                                pointStyle: 'circle',
                                boxWidth: 12,
                                boxHeight: 12,
                                generateLabels: function(chart) {
                                    const data = chart.data;
                                    if (data.labels.length && data.datasets.length) {
                                        return data.labels.map((label, i) => {
                                            const dataset = data.datasets[0];
                                            const value = dataset.data[i];
                                            const total = dataset.data.reduce((a, b) => a + b, 0);
                                            const percentage = ((value / total) * 100).toFixed(1);
                                            
                                            return {
                                                text: `${label} (${percentage}%)`,
                                                fillStyle: dataset.backgroundColor[i],
                                                strokeStyle: dataset.borderColor[i],
                                                lineWidth: dataset.borderWidth,
                                                hidden: false,
                                                index: i
                                            };
                                        });
                                    }
                                    return [];
                                }
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: 'white',
                            bodyColor: 'white',
                            borderColor: 'rgba(249, 115, 22, 1)',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((context.parsed / total) * 100).toFixed(1);
                                    return `${context.label}: ${context.parsed} responses (${percentage}%)`;
                                }
                            }
                        }
                    },
                    layout: {
                        padding: {
                            top: 10,
                            bottom: 10,
                            left: 10,
                            right: 10
                        }
                    }
                }
            });
        }
        
        function showError() {
            const container = document.getElementById(id)?.parentElement;
            if (container) {
                container.innerHTML = `
                    <div class="chart-error">
                        <p>Unable to load chart. Please refresh the page.</p>
                    </div>
                `;
            }
        }
    });
</script>

<style>
    .chart-container {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        border: 1px solid rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
    }
    
    .chart-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: rgba(0, 0, 0, 0.9);
        margin-bottom: 1rem;
        text-align: center;
    }
    
    .chart-wrapper {
        position: relative;
        height: 420px;
        width: 100%;
    }
    
    .chart-canvas {
        max-width: 100%;
        height: 100%;
    }
    
    .chart-error {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 350px;
        color: rgba(0, 0, 0, 0.6);
        font-style: italic;
    }
    
    @media (max-width: 768px) {
        .chart-container {
            padding: 1rem;
        }
        
        .chart-title {
            font-size: 1.1rem;
        }
        
        .chart-wrapper {
            height: 380px;
        }
    }
</style>
