---
import { headerMenu, type MenuItem } from '@data/menu';
import { headerSetting } from '@data/config';
import Logo from '@components/Logo.astro';
import { Menu, X, ChevronDown } from 'lucide-astro';
import Button from '@components/ui/Button.astro';
import { Image } from 'astro:assets';
import logo from '../assets/logo.png';

interface Props {
    overlayMode?: boolean;
}

const { overlayMode = false } = Astro.props;

const ctaButton = {
    name: 'Donate',
    link: '/donate',
};

// Get the current path to determine active menu item
const currentPath = Astro.url.pathname;

// Function to check if a link is the current page or a parent of the current page
const isCurrentPage = (link: string) => {
    if (link === '/') {
        return currentPath === '/';
    }
    return currentPath.startsWith(link);
};
---

<style>
    header {
        transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1), 
                    opacity 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    header[data-header-mode="transition"] {
        transform: translateY(0);
        opacity: 1;
    }
    
    /* Ensure mobile menu elements are always accessible */
    .mobile-menu-button {
        position: relative !important;
        z-index: 100 !important;
    }
    
    .mobile-menu {
        z-index: 90 !important;
        position: fixed !important;
        top: 0 !important;
        left: 0 !important;
        right: 0 !important;
        bottom: 0 !important;
        width: 100vw !important;
        height: 100vh !important;
    }
    
    /* Ensure mobile menu displays properly */
    .mobile-menu.mobile-menu-open {
        visibility: visible !important;
        display: block !important;
    }
    
    /* Mobile menu closed state */
    .mobile-menu-closed {
        visibility: hidden !important;
    }
    
    /* Mobile menu text styling */
    .mobile-menu a {
        color: white;
        font-size: 1.125rem;
        font-weight: 500;
    }
    
    /* Mobile menu close button styling */
    .mobile-menu-close {
        z-index: 100 !important;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .mobile-menu-close:hover {
        background: rgba(255, 255, 255, 0.2) !important;
        transform: scale(1.05);
    }
    
    /* Ensure proper mobile menu positioning */
    @media (max-width: 1023px) {
        .mobile-menu {
            z-index: 90 !important;
        }
        
        .mobile-menu-button, .mobile-menu-close {
            z-index: 100 !important;
        }
    }
</style>

<header class="fixed top-0 z-50 w-full left-0" data-header-mode={headerSetting.headerMode} data-overlay-mode={overlayMode}>
    <div class="site-container--content mx-auto px-4 mt-4">
        <div class={`flex justify-between items-center py-4 rounded-lg px-4 border transition-all duration-300 ${
            overlayMode 
                ? 'header-overlay-transparent border-white/20' 
                : 'header-solid bg-white border-black'
        }`}>
            <Logo variant="header" />
            <nav class="relative flex items-center gap-2 lg:gap-8" aria-label="Site Navigation">
                {/* Desktop Menu */}
                <ul class="hidden lg:flex lg:gap-8 items-center">
                    {
                        headerMenu.filter(item => !item.mobileOnly).map((item, index) => (
                            <li class="relative group">
                                <div class="flex items-center gap-1">
                                    <a
                                        href={item.link}
                                        class:list={[
                                            'text-small font-medium rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-nav-text-active',
                                            isCurrentPage(item.link)
                                                ? 'text-nav-text-current font-semibold'
                                                : 'text-nav-text hover:text-nav-text-hover',
                                        ]}
                                        aria-current={isCurrentPage(item.link) ? 'page' : undefined}
                                    >
                                        {item.name}
                                        {item.children && item.showArrow && (
                                            <ChevronDown
                                                size={16}
                                                class="transform transition-transform inline-block ml-1"
                                                aria-hidden="true"
                                            />
                                        )}
                                    </a>
                                    {item.children && (
                                        <button
                                            type="button"
                                            class="sr-only"
                                            aria-expanded="false"
                                            aria-label={item.name}
                                        />
                                    )}
                                </div>
                                {item.children && (
                                    <ul
                                        class:list={[
                                            'submenu absolute mt-2 bg-nav-submenu-bg border-black border rounded-md min-w-[200px] transition-all duration-200 opacity-0 invisible overflow-hidden z-50',
                                            index === headerMenu.length - 1 ? 'right-0' : 'left-0',
                                        ]}
                                    >
                                        {item.children.map((child) => (
                                            <li>
                                                <a
                                                    href={child.link}
                                                    class:list={[
                                                        'block px-4 text-small py-2 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-nav-text-active',
                                                        isCurrentPage(child.link)
                                                            ? 'text-nav-text-current font-semibold'
                                                            : 'text-nav-text hover:text-nav-text-hover',
                                                    ]}
                                                    aria-current={isCurrentPage(child.link) ? 'page' : undefined}
                                                >
                                                    {child.name}
                                                </a>
                                            </li>
                                        ))}
                                    </ul>
                                )}
                            </li>
                        ))
                    }
                </ul>

                <Button href={ctaButton.link} variant="primary" class="!hidden lg:!inline-flex">{ctaButton.name}</Button>

                {/* Mobile Menu Button */}
                <button
                    class="mobile-menu-button relative z-[100] p-2 border-none cursor-pointer bg-transparent lg:hidden"
                    aria-label="Toggle Menu"
                    aria-expanded="false"
                >
                    <span class="menu-icon block">
                        <Menu size={24} class="text-body-base" />
                    </span>
                    <span class="close-icon hidden">
                        <X size={24} class="text-white" />
                    </span>
                </button>
            </nav>
        </div>
    </div>
</header>

{/* Mobile Menu Panel - Outside header to avoid transform conflicts */}
<div
    class="mobile-menu fixed inset-0 z-[90] px-8 pt-24 bg-primary lg:hidden mobile-menu-closed opacity-0 scale-95 transform transition-all duration-300 ease-in-out overflow-y-auto flex flex-col"
>
    {/* Mobile Menu Close Button */}
    <button
        class="mobile-menu-close absolute top-6 right-6 z-[100] p-2 rounded-md text-white hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-white transition-colors duration-200"
        aria-label="Close Menu"
    >
        <X size={24} class="text-white" />
    </button>

    {/* Main content area */}
    <div class="flex-1">
        <ul class="flex flex-col gap-4">
            {
                headerMenu.map((item) => (
                    <li>
                        <div class="text-white">
                            <div class="flex items-center justify-between">
                                <a
                                    href={item.link}
                                    class:list={[
                                        'py-1 rounded-md focus:outline-none focus:ring-2 focus:ring-nav-mobile-text-active',
                                        isCurrentPage(item.link)
                                            ? 'text-nav-mobile-text-current font-semibold'
                                            : 'text-nav-mobile-text hover:text-nav-mobile-text-hover',
                                    ]}
                                    aria-current={isCurrentPage(item.link) ? 'page' : undefined}
                                >
                                    {item.name}
                                </a>
                                {item.children && (
                                    <button
                                        class:list={[
                                            'mobile-submenu-button p-2 -mr-2 rounded-md focus:outline-none focus:ring-2 focus:ring-nav-mobile-text-active',
                                            isCurrentPage(item.link)
                                                ? 'text-nav-mobile-text-current'
                                                : 'text-nav-mobile-text hover:text-nav-mobile-text-hover',
                                        ]}
                                        aria-label={`Toggle ${item.name} submenu`}
                                        aria-expanded="false"
                                    >
                                        <ChevronDown
                                            size={16}
                                            class="transform transition-transform duration-200"
                                        />
                                    </button>
                                )}
                            </div>
                            {item.children && (
                                <ul class="mobile-submenu ml-4 mt-2 space-y-2 hidden" role="menu">
                                    {item.children.map((child) => (
                                        <li role="none">
                                            <a
                                                href={child.link}
                                                class:list={[
                                                    'block py-1 rounded-md focus:outline-none focus:ring-2 focus:ring-nav-mobile-text-active',
                                                    isCurrentPage(child.link)
                                                        ? 'text-nav-mobile-text-current font-semibold'
                                                        : 'text-nav-mobile-text hover:text-nav-mobile-text-hover',
                                                ]}
                                                role="menuitem"
                                                aria-current={
                                                    isCurrentPage(child.link) ? 'page' : undefined
                                                }
                                            >
                                                {child.name}
                                            </a>
                                        </li>
                                    ))}
                                </ul>
                            )}
                        </div>
                    </li>
                ))
            }
        </ul>

        {/* Updated mobile CTA button styling */}
        <div class="mt-8">
            <Button href={ctaButton.link} variant="ghostLight">{ctaButton.name} </Button>
        </div>
    </div>

    {/* Logo image - positioned at the bottom */}
    <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2">
        <Image src={logo} alt="Logo" width={100} height={100} class="w-16 h-16 object-contain" />
    </div>
</div>

<script>
    // Header scroll behavior
    const header = document.querySelector('header') as HTMLElement;
    const headerMode = header?.getAttribute('data-header-mode');
    const overlayMode = header?.getAttribute('data-overlay-mode') === 'true';
    const headerInner = header?.querySelector('div > div') as HTMLElement;
    let isHidden = false; // Move to global scope for mobile menu access

    if (headerMode === 'transition') {
        let lastScrollY = 0;
        let ticking = false;
        let scrollTimeout: number | null = null;
        const scrollThreshold = 8; // Increased threshold for better stability
        const hideThreshold = 100; // Scroll position to start hiding header
        const showThreshold = 50; // How much to scroll up before showing header

        function updateHeader() {
            const currentScrollY = Math.max(0, window.scrollY); // Prevent negative values
            const scrollDirection = currentScrollY - lastScrollY;
            const scrollDistance = Math.abs(scrollDirection);
            
            // Handle overlay mode background transitions
            if (overlayMode && headerInner) {
                if (currentScrollY > 50) {
                    // Scrolled down - make header more opaque
                    headerInner.classList.remove('header-overlay-transparent');
                    headerInner.classList.add('header-overlay');
                } else {
                    // At top - keep transparent
                    headerInner.classList.remove('header-overlay');
                    headerInner.classList.add('header-overlay-transparent');
                }
            }
            
            // Only trigger visibility changes if we've scrolled enough
            if (scrollDistance > scrollThreshold) {
                if (scrollDirection > 0 && currentScrollY > hideThreshold && !isHidden) {
                    // Scrolling down past threshold - hide header
                    isHidden = true;
                    header.style.transform = 'translateY(-100%)';
                    header.style.opacity = '0';
                } else if (scrollDirection < 0 && isHidden) {
                    // Scrolling up while hidden - show header after sufficient upward scroll
                    const scrolledUpEnough = lastScrollY - currentScrollY > showThreshold;
                    if (scrolledUpEnough || currentScrollY <= hideThreshold) {
                        isHidden = false;
                        header.style.transform = 'translateY(0)';
                        header.style.opacity = '1';
                    }
                }
                
                lastScrollY = currentScrollY;
            }
            
            // Always show header when at the very top
            if (currentScrollY <= 10 && isHidden) {
                isHidden = false;
                header.style.transform = 'translateY(0)';
                header.style.opacity = '1';
            }
            
            ticking = false;
        }

        function onScroll() {
            // Clear any existing timeout
            if (scrollTimeout) {
                clearTimeout(scrollTimeout);
            }
            
            if (!ticking) {
                requestAnimationFrame(updateHeader);
                ticking = true;
            }
            
            // Set a timeout to ensure header is visible when scrolling stops
            scrollTimeout = window.setTimeout(() => {
                if (window.scrollY <= hideThreshold && isHidden) {
                    isHidden = false;
                    header.style.transform = 'translateY(0)';
                    header.style.opacity = '1';
                }
            }, 150);
        }

        window.addEventListener('scroll', onScroll, { passive: true });
        
        // Handle window resize to reset header position
        window.addEventListener('resize', () => {
            if (!isHidden) {
                header.style.transform = 'translateY(0)';
                header.style.opacity = '1';
            }
        });
        
        // Handle page visibility change (e.g., tab switching)
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && window.scrollY <= hideThreshold && isHidden) {
                isHidden = false;
                header.style.transform = 'translateY(0)';
                header.style.opacity = '1';
            }
        });
    }

    // Desktop Menu
    const desktopMenuItems = document.querySelectorAll('.group');

    desktopMenuItems.forEach((item) => {
        const link = item.querySelector('a');
        const button = item.querySelector('button');
        const submenu = item.querySelector('.submenu');
        const submenuLinks = submenu?.querySelectorAll('a');

        if (submenu && link && button) {
            // Handle hover
            item.addEventListener('mouseenter', () => {
                showSubmenu(submenu as HTMLElement, button as HTMLElement);
            });

            item.addEventListener('mouseleave', () => {
                hideSubmenu(submenu as HTMLElement, button as HTMLElement);
            });

            // Handle keyboard navigation
            link.addEventListener('keydown', (e) => {
                if (e.key === 'ArrowDown' && submenu) {
                    e.preventDefault();
                    showSubmenu(submenu as HTMLElement, button as HTMLElement);
                    submenuLinks?.[0]?.focus();
                }
            });

            button.addEventListener('click', (e) => {
                if (submenu) {
                    e.preventDefault();
                    const isExpanded = button.getAttribute('aria-expanded') === 'true';
                    if (isExpanded) {
                        hideSubmenu(submenu as HTMLElement, button as HTMLElement);
                    } else {
                        showSubmenu(submenu as HTMLElement, button as HTMLElement);
                        submenuLinks?.[0]?.focus();
                    }
                }
            });

            button.addEventListener('keydown', (e) => {
                if (e.key === 'ArrowDown' && submenu) {
                    e.preventDefault();
                    showSubmenu(submenu as HTMLElement, button as HTMLElement);
                    submenuLinks?.[0]?.focus();
                }
            });

            // Don't show submenu on focus, only on hover or arrow key
            link.addEventListener('focus', () => {
                hideSubmenu(submenu as HTMLElement, button as HTMLElement);
            });

            // Keyboard navigation within submenu
            submenuLinks?.forEach((submenuLink, index) => {
                submenuLink.addEventListener('keydown', (e) => {
                    const lastIndex = submenuLinks.length - 1;

                    switch (e.key) {
                        case 'ArrowDown':
                            e.preventDefault();
                            if (index < lastIndex) {
                                submenuLinks[index + 1].focus();
                            }
                            break;
                        case 'ArrowUp':
                            e.preventDefault();
                            if (index > 0) {
                                submenuLinks[index - 1].focus();
                            } else {
                                link.focus();
                                hideSubmenu(submenu as HTMLElement, button as HTMLElement);
                            }
                            break;
                        case 'Escape':
                            e.preventDefault();
                            hideSubmenu(submenu as HTMLElement, button as HTMLElement);
                            link.focus();
                            break;
                        case 'Tab':
                            // Allow normal tab behavior but close submenu
                            hideSubmenu(submenu as HTMLElement, button as HTMLElement);
                            break;
                    }
                });
            });

            // Close submenu when focus leaves
            document.addEventListener('focusin', (e) => {
                if (item && !item.contains(e.target as Node)) {
                    hideSubmenu(submenu as HTMLElement, button as HTMLElement);
                }
            });
        }
    });

    // Helper functions
    function showSubmenu(submenu: HTMLElement, button: HTMLElement) {
        submenu.classList.remove('invisible', 'opacity-0');
        submenu.classList.add('visible', 'opacity-100');
        button.setAttribute('aria-expanded', 'true');
    }

    function hideSubmenu(submenu: HTMLElement, button: HTMLElement) {
        submenu.classList.add('invisible', 'opacity-0');
        submenu.classList.remove('visible', 'opacity-100');
        button.setAttribute('aria-expanded', 'false');
    }

    // Simple mobile submenu toggle
    document.querySelectorAll('.mobile-submenu-button').forEach((button) => {
        button.addEventListener('click', () => {
            const submenu = button.parentElement?.nextElementSibling as HTMLElement;
            const chevron = button.querySelector('svg');

            // Toggle submenu
            if (submenu) {
                submenu.classList.toggle('hidden');
                chevron?.classList.toggle('rotate-180');
                const isExpanded = submenu.classList.contains('hidden') ? 'false' : 'true';
                button.setAttribute('aria-expanded', isExpanded);
            }
        });
    });

    // Mobile menu toggle with scroll lock
    const mobileMenuButton = document.querySelector('.mobile-menu-button');
    const mobileMenu = document.querySelector('.mobile-menu');
    const mobileMenuClose = document.querySelector('.mobile-menu-close');
    const menuIcon = document.querySelector('.menu-icon');
    const closeIcon = document.querySelector('.close-icon');

    // Function to close mobile menu
    function closeMobileMenu() {
        if (!mobileMenu) return;
        
        // Update ARIA and icon states immediately
        mobileMenuButton?.setAttribute('aria-expanded', 'false');
        menuIcon?.classList.remove('hidden');
        closeIcon?.classList.add('hidden');
        
        // Start the closing animation using theme utility classes
        mobileMenu.classList.add('opacity-0', 'scale-95');
        mobileMenu.classList.remove('opacity-100', 'scale-100');
        
        // Wait for animation to complete before hiding and cleaning up
        setTimeout(() => {
            mobileMenu?.classList.add('mobile-menu-closed');
            mobileMenu?.classList.remove('mobile-menu-open');
            document.body.style.overflow = '';
        }, 300);
    }

    // Function to open mobile menu
    function openMobileMenu() {
        if (!mobileMenu) return;
        
        // Prepare the menu for animation
        document.body.style.overflow = 'hidden';
        mobileMenu.classList.remove('mobile-menu-closed');
        mobileMenu.classList.add('mobile-menu-open');
        mobileMenuButton?.setAttribute('aria-expanded', 'true');
        
        // Force a reflow to ensure the menu is visible before animating
        (mobileMenu as HTMLElement).offsetHeight;
        
        // Start the opening animation using theme utility classes
        requestAnimationFrame(() => {
            mobileMenu?.classList.remove('opacity-0', 'scale-95');
            mobileMenu?.classList.add('opacity-100', 'scale-100');
        });
        
        // Update icon states
        menuIcon?.classList.add('hidden');
        closeIcon?.classList.remove('hidden');
    }

    // Mobile menu button click handler
    mobileMenuButton?.addEventListener('click', () => {
        const isMobileMenuClosed = mobileMenu?.classList.contains('mobile-menu-closed');
        
        if (isMobileMenuClosed) {
            openMobileMenu();
        } else {
            closeMobileMenu();
        }
    });

    // Mobile menu close button click handler
    mobileMenuClose?.addEventListener('click', () => {
        closeMobileMenu();
    });

    // Close mobile menu when clicking outside or on menu links
    document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const isMenuButton = target.closest('.mobile-menu-button');
        const isMenuContent = target.closest('.mobile-menu');
        
        if (!isMenuButton && !isMenuContent && mobileMenu && !mobileMenu.classList.contains('mobile-menu-closed')) {
            closeMobileMenu();
        }
    });

    // Close mobile menu when clicking on menu links
    mobileMenu?.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target.tagName === 'A' && target.getAttribute('href')) {
            // Close menu when a link is clicked
            setTimeout(() => {
                closeMobileMenu();
            }, 100);
        }
    });

    // Close mobile menu with escape key
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && mobileMenu && !mobileMenu.classList.contains('mobile-menu-closed')) {
            closeMobileMenu();
            
            // Return focus to menu button
            if (mobileMenuButton && 'focus' in mobileMenuButton) {
                (mobileMenuButton as HTMLElement).focus();
            }
        }
    });
</script>
