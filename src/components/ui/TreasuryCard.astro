---
export interface Props {
    currency: 'USD' | 'BTC';
    balance?: number;
    lastUpdated?: string;
    isLoading?: boolean;
    error?: string;
}

const { currency, balance, lastUpdated, isLoading = false, error } = Astro.props;

// Format balance based on currency
const formatBalance = (amount: number, curr: string) => {
    if (curr === 'USD') {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        }).format(amount);
    } else {
        return `${amount.toFixed(8)} BTC`;
    }
};

// Format date
const formatDate = (dateString: string) => {
    try {
        const date = new Date(dateString);
        return new Intl.DateTimeFormat('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            timeZone: 'America/New_York'
        }).format(date);
    } catch {
        return 'Unknown';
    }
};

const currencyIcon = currency === 'USD' ? 'ðŸ’µ' : 'â‚¿';
const currencyName = currency === 'USD' ? 'US Dollars' : 'Bitcoin';
const currencyDescription = currency === 'USD' 
    ? 'Working funds for daily operations' 
    : 'Long-term savings and treasury reserves';
---

<div class="treasury-card bg-white rounded-xl p-6 shadow-lg border border-gray-100 transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
    <!-- Currency Header -->
    <div class="flex items-center justify-between mb-4">
        <div class="flex items-center gap-3">
            <span class="text-2xl">{currencyIcon}</span>
            <div>
                <h3 class="text-lg font-bold text-body-base">{currency}</h3>
                <p class="text-sm text-body-base/70">{currencyName}</p>
            </div>
        </div>
        {currency === 'USD' && (
            <span class="px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full">
                Operations
            </span>
        )}
        {currency === 'BTC' && (
            <span class="px-2 py-1 text-xs font-medium bg-orange-100 text-orange-800 rounded-full">
                Savings
            </span>
        )}
    </div>

    <!-- Balance Display -->
    <div class="mb-4">
        {isLoading ? (
            <div class="animate-pulse">
                <div class="h-8 bg-gray-200 rounded w-32 mb-2"></div>
                <div class="h-4 bg-gray-200 rounded w-24"></div>
            </div>
        ) : error ? (
            <div class="text-red-600">
                <p class="text-2xl font-bold">Error</p>
                <p class="text-sm">{error}</p>
            </div>
        ) : balance !== undefined ? (
            <div>
                <p class="text-3xl font-bold text-body-base mb-1" id={`${currency.toLowerCase()}-balance`}>
                    {formatBalance(balance, currency)}
                </p>
                <p class="text-sm text-body-base/60">
                    {currencyDescription}
                </p>
            </div>
        ) : (
            <div class="text-gray-500">
                <p class="text-2xl font-bold">--</p>
                <p class="text-sm">Loading balance...</p>
            </div>
        )}
    </div>

    <!-- Last Updated -->
    {lastUpdated && !isLoading && !error && (
        <div class="pt-4 border-t border-gray-100">
            <p class="text-xs text-body-base/50">
                Last updated: {formatDate(lastUpdated)} EST
            </p>
        </div>
    )}
</div>

<style>
    .treasury-card {
        /* Ensure consistent height and responsive behavior */
        min-height: 200px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }
    
    .treasury-card:hover {
        transform: translateY(-2px);
    }
    
    /* Loading animation */
    @keyframes pulse {
        0%, 100% {
            opacity: 1;
        }
        50% {
            opacity: 0.5;
        }
    }
    
    .animate-pulse {
        animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }
</style>
