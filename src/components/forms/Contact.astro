---
import Button from "@components/ui/Button.astro";
import Input from "@components/ui/form/Input.astro";
import Textarea from "@components/ui/form/Textarea.astro";

const formBackground = 'light';
---
<form id="contact-form" class="space-y-6 bg-white p-6 rounded-lg">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Input
            label="Name"
            id="name"
            name="name"
            required
            background={formBackground}
            autocomplete="name"
            placeholder="Satoshi Nakamoto"
        />
        <Input
            label="Email"
            type="email"
            id="email"
            name="email"
            required
            background={formBackground}
            autocomplete="email"
            inputmode="email"
            placeholder="email@example.com"
        />
    </div>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Input
            label="Phone"
            type="tel"
            id="phone"
            name="phone"
            background={formBackground}
            autocomplete="tel"
            inputmode="tel"
            placeholder="(555) 123-4567"
        />
        <Input
            label="Organization"
            id="organization"
            name="organization"
            background={formBackground}
            autocomplete="organization"
            placeholder="Your organization or company"
        />
    </div>

    <Textarea
        label="Message"
        id="message"
        name="message"
        required
        background={formBackground}
        autocomplete="off"
        placeholder="Your message here... "
    />

    <!-- Status Message -->
    <div id="form-status" class="hidden p-3 rounded-md" role="alert"></div>

    <div class="mt-6">
        <button 
            type="submit" 
            id="submit-btn"
            class="group relative inline-flex overflow-hidden items-center justify-center rounded-border-small font-medium transition-all duration-300 ease-out focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 rounded-md flex items-center gap-2 bg-primary text-white hover:bg-primary-light focus-visible:ring-primary hover:ring-2 hover:ring-primary hover:ring-offset-2 h-10 px-4 py-2 text-small"
        >
            <span class="absolute left-0 -mt-12 h-32 w-1/2 translate-x-[250%] rotate-12 bg-white opacity-20 transition-all duration-250 ease-out group-hover:translate-x-[2%]"></span>
            Submit
        </button>
    </div>
</form>

<script>
interface ContactFormData {
  name: string;
  email: string;
  phone?: string;
  organization?: string;
  message: string;
}

interface FormResponse {
  success: boolean;
  message?: string;
  error?: string;
}

class ContactFormHandler {
  private form: HTMLFormElement;
  private submitBtn: HTMLButtonElement;
  private statusEl: HTMLDivElement;

  constructor() {
    this.form = document.getElementById('contact-form') as HTMLFormElement;
    this.submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    this.statusEl = document.getElementById('form-status') as HTMLDivElement;
    
    if (this.form) {
      this.form.addEventListener('submit', this.handleSubmit.bind(this));
    }
  }

  private async handleSubmit(event: Event): Promise<void> {
    event.preventDefault();
    
    // Reset status
    this.hideStatus();
    
    // Disable submit button
    this.setSubmitting(true);

    try {
      // Collect form data
      const formData = this.collectFormData();
      
      // Validate form data
      if (!this.validateFormData(formData)) {
        this.showStatus('Please fill in all required fields correctly.', 'error');
        return;
      }

      // Submit directly to Google Forms
      const success = await this.submitToGoogleForm(formData);

      if (success) {
        this.showStatus('Thanks for your message. We will response shortly!', 'success');
        this.form.reset();
      } else {
        this.showStatus('Failed to submit form. Please try again.', 'error');
      }
    } catch (error) {
      console.error('Form submission error:', error);
      this.showStatus('Network error. Please check your connection and try again.', 'error');
    } finally {
      this.setSubmitting(false);
    }
  }

  private collectFormData(): ContactFormData {
    const formData = new FormData(this.form);
    return {
      name: formData.get('name') as string,
      email: formData.get('email') as string,
      phone: formData.get('phone') as string || undefined,
      organization: formData.get('organization') as string || undefined,
      message: formData.get('message') as string,
    };
  }

  private validateFormData(data: ContactFormData): boolean {
    // Check required fields
    if (!data.name?.trim() || !data.email?.trim() || !data.message?.trim()) {
      return false;
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(data.email)) {
      return false;
    }

    return true;
  }

  private setSubmitting(isSubmitting: boolean): void {
    if (this.submitBtn) {
      this.submitBtn.disabled = isSubmitting;
      this.submitBtn.textContent = isSubmitting ? 'Submitting...' : 'Submit';
    }
  }

  private showStatus(message: string, type: 'success' | 'error'): void {
    if (this.statusEl) {
      this.statusEl.textContent = message;
      this.statusEl.className = `p-3 rounded-md ${
        type === 'success' 
          ? 'bg-green-100 text-green-800 border border-green-200' 
          : 'bg-red-100 text-red-800 border border-red-200'
      }`;
      this.statusEl.classList.remove('hidden');
      
      // Scroll to status message
      this.statusEl.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
  }

  private hideStatus(): void {
    if (this.statusEl) {
      this.statusEl.classList.add('hidden');
    }
  }

  private async submitToGoogleForm(formData: ContactFormData): Promise<boolean> {
    try {
      const formId = '1FAIpQLSf9wUIYF3-9bMJK3EoHvPHNJsGbgd_6ipR8_I7PNsEyWFUyVA';
      const entries = {
        name: 'entry.2053111584',
        email: 'entry.1784549577',
        phone: 'entry.849479955',
        organization: 'entry.366023573',
        message: 'entry.496949466'
      };
      
      const baseUrl = `https://docs.google.com/forms/d/e/${formId}/formResponse`;
      
      // Create FormData object
      const submitData = new FormData();
      submitData.append(entries.name, formData.name);
      submitData.append(entries.email, formData.email);
      if (formData.phone) {
        submitData.append(entries.phone, formData.phone);
      }
      if (formData.organization) {
        submitData.append(entries.organization, formData.organization);
      }
      submitData.append(entries.message, formData.message);

      // Submit to Google Forms
      await fetch(baseUrl, {
        method: 'POST',
        body: submitData,
        mode: 'no-cors' // Required for Google Forms submission
      });

      // Google Forms returns a CORS error but the submission still works
      // Since we can't read the response due to no-cors mode, we assume success
      return true;
    } catch (error) {
      console.error('Error submitting to Google Form:', error);
      return false;
    }
  }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  new ContactFormHandler();
});
</script>
