---
import { getPaddingClass, getBackgroundColor, getHeadlineColor, getTextColor } from '@utils/styleUtils';
import type { PaddingSize, ThemeColor } from '@utils/styleUtils';
import Eyebrow from '@components/ui/Eyebrow.astro';
import DonorCard from '@components/ui/DonorCard.astro';
import Button from '@components/ui/Button.astro';

interface Donor {
    id: string;
    displayName: string;
    avatarUrl?: string;
    image?: string;
    message?: string;
    links?: {
        twitter?: string;
        nostr?: string;
        github?: string;
    };
    badges?: string[];
    blockHeight?: number;
    rank?: number;
}

export interface Props {
    content: {
        eyebrow?: string;
        title: string;
        description?: string;
        button?: {
            text: string;
            href: string;
            variant?: 'primary' | 'secondary' | 'accent' | 'ghostLight' | 'ghostDark';
            size?: 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
            target?: string;
        };
    };
    donorsData: Donor[];
    background?: ThemeColor;
    padding?: PaddingSize;
    paddingTop?: PaddingSize;
    paddingBottom?: PaddingSize;
    maxDonors?: number;
    showMessage?: boolean;
    showSocials?: boolean;
    showBlockHeight?: boolean;
}

const {
    content: { eyebrow, title, description, button },
    donorsData,
    background = 'base',
    maxDonors,
    showMessage = true,
    showSocials = true,
    showBlockHeight = true
} = Astro.props;

const bgColor = getBackgroundColor(background);
const paddingClass = getPaddingClass({ 
    padding: Astro.props.padding,
    paddingTop: Astro.props.paddingTop,
    paddingBottom: Astro.props.paddingBottom 
});

const headlineColor = getHeadlineColor(background);
const textColor = getTextColor(background);

// Sort donors: ranked first (by rank ascending), then unranked in original order
const sortedDonors = ([...donorsData] as Donor[]).sort((a, b) => {
    const aRank = a.rank ?? Infinity;
    const bRank = b.rank ?? Infinity;
    
    // If both have ranks or both don't have ranks
    if ((a.rank !== undefined && b.rank !== undefined) || (a.rank === undefined && b.rank === undefined)) {
        return aRank - bRank;
    }
    
    // Ranked donors come before unranked
    return a.rank !== undefined ? -1 : 1;
});

// Apply max donors limit if specified
const donors = maxDonors ? sortedDonors.slice(0, maxDonors) : sortedDonors;
const hasDonors = donors.length > 0;
---

<section class:list={["relative", bgColor, paddingClass]}>
    <div class="site-container--content px-4">
        {/* Section Header */}
        <div class="max-w-3xl mx-auto text-center mb-12">
            {eyebrow && (
                <Eyebrow 
                    text={eyebrow} 
                    background={background} 
                />
            )}
            {title && (
                <h2 
                    data-aos="fade-up" 
                    class:list={["text-3xl font-bold mb-4", headlineColor]}
                >
                    {title}
                </h2>
            )}
            {description && (
                <p 
                    data-aos="fade-up" 
                    data-aos-delay="100"
                    class:list={["text-lg", textColor]}
                >
                    {description}
                </p>
            )}
            {button && (
                <div 
                    class="mt-6"
                    data-aos="fade-up"
                    data-aos-delay="200"
                >
                    <Button
                        href={button.href}
                        variant={button.variant || 'primary'}
                        size={button.size || 'md'}
                        target={button.target || '_self'}
                    >
                        {button.text}
                    </Button>
                </div>
            )}
        </div>
        
        {/* Donor Grid or Empty State */}
        {hasDonors ? (
            <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8 max-w-6xl mx-auto">
                {donors.map((donor, index) => (
                    <DonorCard 
                        donor={donor} 
                        index={index}
                        showMessage={showMessage}
                        showSocials={showSocials}
                        showBlockHeight={showBlockHeight}
                    />
                ))}
            </div>
        ) : (
            <div 
                class="max-w-2xl mx-auto text-center py-12"
                data-aos="fade-up"
            >
                <p class:list={["text-xl italic", textColor, "opacity-70"]}>
                    The Genesis has begun â€” be among the first to support this mission.
                </p>
            </div>
        )}
    </div>
</section>


