---
import { Image } from 'astro:assets';
import Button from '@components/ui/Button.astro';
import defaultHeroImage from '@assets/images/hero/default.jpg';

interface HeroContent {
    title: string;
    description: string;
    buttons?: {
        text: string;
        link: string;
        variant?: 'primary' | 'secondary' | 'ghostLight' | 'ghostDark';
        target?: string;
    }[];
    backgroundImage?: any;
    overlayOpacity?: number; // Value between 0 and 1
    contentPosition?: 'center' | 'bottom' | 'top'; // Flexible positioning
    textAlign?: 'left' | 'center' | 'right';
}

interface Props {
    content: HeroContent;
}

const { content } = Astro.props;
const opacity = content.overlayOpacity ?? 0.8;
const contentPosition = content.contentPosition ?? 'center';
const textAlign = content.textAlign ?? 'center';
const backgroundImage = content.backgroundImage ?? defaultHeroImage;

// Position classes for content
const positionClasses = {
    center: 'items-center justify-center',
    bottom: 'items-end justify-center pb-20',
    top: 'items-start justify-center pt-32'
};

// Text alignment classes
const alignmentClasses = {
    left: 'text-left',
    center: 'text-center',
    right: 'text-right'
};
---

<section class="fullscreen-hero relative w-full h-screen min-h-screen overflow-hidden">
    {/* Background Image */}
    <div class="absolute inset-0 w-full h-full">
        <Image
            src={backgroundImage}
            alt=""
            width={1920}
            height={1080}
            class="w-full h-full object-cover"
            quality={80}
            format="webp"
            loading="eager"
            decoding="async"
        />
    </div>
    
    {/* Overlay */}
    <div
        class="hero-background absolute inset-0 w-full h-full"
        style={`opacity: ${opacity};`}
    ></div>

    {/* Content Container */}
    <div class={`relative z-10 w-full h-full flex flex-col ${positionClasses[contentPosition]}`}>
        <div class={`site-container--hero mx-auto px-4 ${alignmentClasses[textAlign]}`}>
                <h1 class="text-white mb-6" data-aos="fade-up">
                    {content.title}
                </h1>
                
                {content.description && (
                    <p class="text-white text-lg md:text-xl leading-relaxed mb-8 opacity-90" data-aos="fade-up" data-aos-delay="100">
                        {content.description}
                    </p>
                )}
                
                {content.buttons && content.buttons.length > 0 && (
                    <div class="flex flex-wrap gap-4 justify-center" data-aos="fade-up" data-aos-delay="200">
                        {content.buttons.map((button) => (
                            <Button
                                href={button.link}
                                target={button.target || '_self'}
                                variant={button.variant || 'primary'}
                            >
                                {button.text}
                            </Button>
                        ))}
                    </div>
                )}
        </div>
    </div>

    {/* Scroll Indicator */}
    <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 z-20">
        <div class="scroll-indicator animate-bounce">
            <svg class="w-6 h-6 text-white opacity-70" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
            </svg>
        </div>
    </div>
</section>

<style>
    .fullscreen-hero {
        /* Ensure full viewport height on mobile */
        height: 100vh;
        height: 100dvh; /* Dynamic viewport height for better mobile support */
    }
    
    .scroll-indicator {
        animation: bounce 2s infinite;
    }
    
    @keyframes bounce {
        0%, 20%, 53%, 80%, 100% {
            transform: translate3d(0, 0, 0);
        }
        40%, 43% {
            transform: translate3d(0, -8px, 0);
        }
        70% {
            transform: translate3d(0, -4px, 0);
        }
        90% {
            transform: translate3d(0, -2px, 0);
        }
    }
    
    /* Ensure text is readable on all backgrounds */
    .fullscreen-hero h1,
    .fullscreen-hero p {
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }
</style>
