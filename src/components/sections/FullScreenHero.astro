---
import { Image } from 'astro:assets';
import Button from '@components/ui/Button.astro';
import FeaturedInitiativeCard from '@components/ui/FeaturedInitiativeCard.astro';
import HeroStats from '@components/initiatives/HeroStats.astro';
import SimpleProgressStats from '@components/initiatives/SimpleProgressStats.astro';
import defaultHeroImage from '@assets/images/hero/default.jpg';

interface Initiative {
    id: string;
    data: {
        title: string;
        shortDescription: string;
        goalAmount: number;
        currentAmount: number;
        startDate: Date;
        targetDate?: Date;
        status: 'active' | 'completed' | 'planned';
        featured: boolean;
    };
}

interface HeroContent {
    title: string;
    description: string;
    buttons?: {
        text: string;
        link: string;
        variant?: 'primary' | 'secondary' | 'ghostLight' | 'ghostDark';
        target?: string;
        hideOnDesktop?: boolean;
    }[];
    backgroundImage?: any;
    overlayOpacity?: number; // Value between 0 and 1
    contentPosition?: 'center' | 'bottom' | 'top'; // Flexible positioning
    textAlign?: 'left' | 'center' | 'right';
    featuredContent?: Initiative; // Optional featured content to display at bottom
    statsContent?: {
        goal2025: number;
        date2025: string;
        goal2026: number;
        date2026: string;
        count: number;
        total: number;
        mtd: number;
        neededPerMonth: number;
    }; // Optional stats content to display at bottom
    simpleStatsContent?: {
        count: number;
        goal: number;
        label?: string;
    }; // Optional simple progress stats to display at bottom
}

interface Props {
    content: HeroContent;
}

const { content } = Astro.props;
const opacity = content.overlayOpacity ?? 0.8;
const contentPosition = content.contentPosition ?? 'center';
const textAlign = content.textAlign ?? 'center';
const backgroundImage = content.backgroundImage ?? defaultHeroImage;

// Position classes for content
const positionClasses = {
    center: 'items-center justify-center',
    bottom: 'items-end justify-center pb-20',
    top: 'items-start justify-center pt-32'
};

// Text alignment classes
const alignmentClasses = {
    left: 'text-left',
    center: 'text-center',
    right: 'text-right'
};
---

<section class="fullscreen-hero relative w-full h-screen min-h-screen overflow-hidden">
    {/* Background Image */}
    <div class="absolute inset-0 w-full h-full">
        <Image
            src={backgroundImage}
            alt=""
            width={1920}
            height={1080}
            class="w-full h-full object-cover"
            quality={80}
            format="webp"
            loading="eager"
            decoding="async"
        />
    </div>
    
    {/* Overlay */}
    <div
        class="hero-background absolute inset-0 w-full h-full"
        style={`opacity: ${opacity};`}
    ></div>

    {/* Content Container */}
    <div class={`relative z-10 w-full h-full flex flex-col ${content.featuredContent || content.statsContent || content.simpleStatsContent ? 'justify-between' : positionClasses[contentPosition]}`}>
        {/* Main Hero Content */}
        <div class={`${content.featuredContent || content.statsContent || content.simpleStatsContent ? 'flex-1 flex flex-col justify-center' : ''} pt-20 sm:pt-24 md:pt-0`}>
            <div class={`site-container--hero mx-auto px-4 sm:px-6 lg:px-8 ${alignmentClasses[textAlign]}`}>
                <h1 class="text-white mb-4 sm:mb-6 hero-title" data-aos="fade-up">
                    {content.title}
                </h1>
                
                {content.description && (
                    <p class="text-white text-base sm:text-lg md:text-xl leading-relaxed mb-6 sm:mb-8 opacity-90 max-w-4xl mx-auto" data-aos="fade-up" data-aos-delay="100">
                        {content.description}
                    </p>
                )}
                
                {content.buttons && content.buttons.length > 0 && (
                    <div class="flex flex-wrap gap-3 sm:gap-4 justify-center" data-aos="fade-up" data-aos-delay="200">
                        {content.buttons.map((button) => (
                            <Button
                                href={button.link}
                                target={button.target || '_self'}
                                variant={button.variant || 'primary'}
                                class={button.hideOnDesktop ? 'md:hidden' : ''}
                            >
                                {button.text}
                            </Button>
                        ))}
                    </div>
                )}
            </div>
        </div>

        {/* Featured Content at Bottom */}
        {content.featuredContent && (
            <div class="pb-16 sm:pb-20 px-4">
                <div class="site-container--hero mx-auto">
                    <FeaturedInitiativeCard initiative={content.featuredContent} />
                </div>
            </div>
        )}

        {/* Stats Content at Bottom */}
        {content.statsContent && (
            <div class="pb-16 sm:pb-20 px-4">
                <div class="site-container--hero mx-auto">
                    <HeroStats 
                        goal2025={content.statsContent.goal2025}
                        date2025={content.statsContent.date2025}
                        goal2026={content.statsContent.goal2026}
                        date2026={content.statsContent.date2026}
                        count={content.statsContent.count}
                        total={content.statsContent.total}
                        mtd={content.statsContent.mtd}
                        neededPerMonth={content.statsContent.neededPerMonth}
                    />
                </div>
            </div>
        )}

        {/* Simple Stats Content at Bottom */}
        {content.simpleStatsContent && (
            <div class="pb-32 sm:pb-40 px-4">
                <div class="site-container--hero mx-auto">
                    <SimpleProgressStats 
                        count={content.simpleStatsContent.count}
                        goal={content.simpleStatsContent.goal}
                        label={content.simpleStatsContent.label}
                    />
                </div>
            </div>
        )}
    </div>

    {/* Scroll Indicator - Hide when featured content or stats are present */}
    {!content.featuredContent && !content.statsContent && !content.simpleStatsContent && (
        <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 z-20">
            <div class="scroll-indicator animate-bounce">
                <svg class="w-6 h-6 text-white opacity-70" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
                </svg>
            </div>
        </div>
    )}
</section>

<style>
    .fullscreen-hero {
        /* Ensure full viewport height on mobile */
        height: 100vh;
        height: 100dvh; /* Dynamic viewport height for better mobile support */
    }
    
    .scroll-indicator {
        animation: bounce 2s infinite;
    }
    
    @keyframes bounce {
        0%, 20%, 53%, 80%, 100% {
            transform: translate3d(0, 0, 0);
        }
        40%, 43% {
            transform: translate3d(0, -8px, 0);
        }
        70% {
            transform: translate3d(0, -4px, 0);
        }
        90% {
            transform: translate3d(0, -2px, 0);
        }
    }
    
    /* Ensure text is readable on all backgrounds */
    .fullscreen-hero h1,
    .fullscreen-hero p {
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }
    
    /* Hero title mobile optimization */
    .hero-title {
        font-size: var(--text-hero-mobile);
        line-height: 1.1;
    }
    
    /* Responsive adjustments for hero content */
    @media (min-width: 768px) {
        .hero-title {
            font-size: var(--text-h1);
            line-height: 1.2;
        }
    }
    
    /* Ensure proper spacing on mobile for fullscreen hero */
    @media (max-width: 767px) {
        .fullscreen-hero .site-container--hero {
            padding-left: 1rem;
            padding-right: 1rem;
        }
        
        .fullscreen-hero h1 {
            margin-bottom: 1rem;
        }
        
        .fullscreen-hero p {
            margin-bottom: 1.5rem;
            font-size: 1rem;
            line-height: 1.6;
        }
    }
</style>
